
DAY4_A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000598  08000598  00001598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b8  080005b8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b8  080005b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000015b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005bc  080005bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005c0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c38  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000390  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00003000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f55  00000000  00000000  0000314c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011c3  00000000  00000000  0001c0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b91c  00000000  00000000  0001d264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8b80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001d0  00000000  00000000  000a8bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  000a8db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000580 	.word	0x08000580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000580 	.word	0x08000580

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <LcdBusyWait>:


#include "lcd.h"

void LcdBusyWait(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	uint32_t state;
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_RS*2)|BV(LCD_RS*2+1));
 800021e:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <LcdBusyWait+0x48>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	@ (8000260 <LcdBusyWait+0x48>)
 8000224:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000228:	6013      	str	r3, [r2, #0]
	LCD_CRTL_GPIO->BSRR = BV(LCD_RS_clear)|BV(LCD_RW)| BV(LCD_EN);
 800022a:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <LcdBusyWait+0x48>)
 800022c:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <LcdBusyWait+0x4c>)
 800022e:	619a      	str	r2, [r3, #24]
	do{
		state=LCD_DATA_GPIO->IDR;
 8000230:	4b0b      	ldr	r3, [pc, #44]	@ (8000260 <LcdBusyWait+0x48>)
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	607b      	str	r3, [r7, #4]
	}while((state &BV(1))!=0);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f003 0302 	and.w	r3, r3, #2
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f7      	bne.n	8000230 <LcdBusyWait+0x18>
	LCD_CRTL_GPIO->BSRR = BV(LCD_RW)| BV(LCD_EN);
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <LcdBusyWait+0x48>)
 8000242:	22c0      	movs	r2, #192	@ 0xc0
 8000244:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->MODER |= BV(LCD_RS*2);
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <LcdBusyWait+0x48>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <LcdBusyWait+0x48>)
 800024c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000250:	6013      	str	r3, [r2, #0]
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40020c00 	.word	0x40020c00
 8000264:	002000c0 	.word	0x002000c0

08000268 <WriteNibble>:

void WriteNibble(uint8_t rs,uint8_t val)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	460a      	mov	r2, r1
 8000272:	71fb      	strb	r3, [r7, #7]
 8000274:	4613      	mov	r3, r2
 8000276:	71bb      	strb	r3, [r7, #6]
	if(rs==LCD_CMD)
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d104      	bne.n	8000288 <WriteNibble+0x20>
		LCD_CRTL_GPIO->BSRR=BV(LCD_RW_clear)|BV(LCD_RS_clear);
 800027e:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <WriteNibble+0x58>)
 8000280:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000284:	619a      	str	r2, [r3, #24]
 8000286:	e002      	b.n	800028e <WriteNibble+0x26>
	else
		LCD_CRTL_GPIO->BSRR=BV(LCD_RW_clear)|BV(LCD_RS);
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <WriteNibble+0x58>)
 800028a:	4a0e      	ldr	r2, [pc, #56]	@ (80002c4 <WriteNibble+0x5c>)
 800028c:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7)|BV(LCD_D6)|BV(LCD_D5)|BV(LCD_D4));
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <WriteNibble+0x58>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <WriteNibble+0x58>)
 8000294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000298:	f023 030d 	bic.w	r3, r3, #13
 800029c:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR=val<<4;
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	4a07      	ldr	r2, [pc, #28]	@ (80002c0 <WriteNibble+0x58>)
 80002a2:	011b      	lsls	r3, r3, #4
 80002a4:	6153      	str	r3, [r2, #20]

	LCD_CRTL_GPIO->BSRR=BV(LCD_EN);
 80002a6:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <WriteNibble+0x58>)
 80002a8:	2280      	movs	r2, #128	@ 0x80
 80002aa:	619a      	str	r2, [r3, #24]
	LCD_CRTL_GPIO->BSRR=BV(LCD_EN_clear);
 80002ac:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <WriteNibble+0x58>)
 80002ae:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002b2:	619a      	str	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	40020c00 	.word	0x40020c00
 80002c4:	00400020 	.word	0x00400020

080002c8 <LcdWrite>:



void LcdWrite(uint8_t rs,uint8_t val)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
	uint8_t high=val>>4, low=val &0x0F;
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	091b      	lsrs	r3, r3, #4
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	f003 030f 	and.w	r3, r3, #15
 80002e4:	73bb      	strb	r3, [r7, #14]
	WriteNibble(rs,high);
 80002e6:	7bfa      	ldrb	r2, [r7, #15]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4611      	mov	r1, r2
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffbb 	bl	8000268 <WriteNibble>
	WriteNibble(rs,low);
 80002f2:	7bba      	ldrb	r2, [r7, #14]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffb5 	bl	8000268 <WriteNibble>
	LcdBusyWait();
 80002fe:	f7ff ff8b 	bl	8000218 <LcdBusyWait>
	DelayMs(3);
 8000302:	2003      	movs	r0, #3
 8000304:	f7ff ff60 	bl	80001c8 <DelayMs>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <LCDINIT>:




void LCDINIT(void)
{ 	DelayMs(50);
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
 8000314:	2032      	movs	r0, #50	@ 0x32
 8000316:	f7ff ff57 	bl	80001c8 <DelayMs>
	RCC->AHB1ENR=LCD_DATA_GPIO_EN;
 800031a:	4b30      	ldr	r3, [pc, #192]	@ (80003dc <LCDINIT+0xcc>)
 800031c:	2203      	movs	r2, #3
 800031e:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR=LCD_CRTL_GPIO_EN;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <LCDINIT+0xcc>)
 8000322:	2203      	movs	r2, #3
 8000324:	631a      	str	r2, [r3, #48]	@ 0x30

	//initialize lcd data pins (mode=output, speed=low, type=push-pull, no pull up/down)
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2)|BV(LCD_D6*2)|BV(LCD_D5*2)|BV(LCD_D4*2));
 8000326:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <LCDINIT+0xd0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a2d      	ldr	r2, [pc, #180]	@ (80003e0 <LCDINIT+0xd0>)
 800032c:	f023 0351 	bic.w	r3, r3, #81	@ 0x51
 8000330:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->MODER |= (BV(LCD_D7*2+1)|BV(LCD_D6*2+1)|BV(LCD_D5*2+1)|BV(LCD_D4*2+1));
 8000332:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <LCDINIT+0xd0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a2a      	ldr	r2, [pc, #168]	@ (80003e0 <LCDINIT+0xd0>)
 8000338:	f043 03a2 	orr.w	r3, r3, #162	@ 0xa2
 800033c:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2)|BV(LCD_D7*2+1)|BV(LCD_D6*2)|BV(LCD_D6*2+1)|BV(LCD_D5*2)|BV(LCD_D5*2+1)|BV(LCD_D4*2)|BV(LCD_D4*2+1));
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <LCDINIT+0xd0>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a27      	ldr	r2, [pc, #156]	@ (80003e0 <LCDINIT+0xd0>)
 8000344:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 8000348:	6093      	str	r3, [r2, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2)|BV(LCD_D7*2+1)|BV(LCD_D6*2)|BV(LCD_D6*2+1)|BV(LCD_D5*2)|BV(LCD_D5*2+1)|BV(LCD_D4*2)|BV(LCD_D4*2+1));
 800034a:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <LCDINIT+0xd0>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	4a24      	ldr	r2, [pc, #144]	@ (80003e0 <LCDINIT+0xd0>)
 8000350:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
 8000354:	60d3      	str	r3, [r2, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7)||BV(LCD_D6)||BV(LCD_D5)|BV(LCD_D4));
 8000356:	4b22      	ldr	r3, [pc, #136]	@ (80003e0 <LCDINIT+0xd0>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4a21      	ldr	r2, [pc, #132]	@ (80003e0 <LCDINIT+0xd0>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	6053      	str	r3, [r2, #4]

	LCD_DATA_GPIO->BSRR =(BV(LCD_D7_clear)|BV(LCD_D6_clear)|BV(LCD_D5_clear)|BV(LCD_D4_clear));
 8000362:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <LCDINIT+0xd0>)
 8000364:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000368:	619a      	str	r2, [r3, #24]

	//intialize the ctrl pins mode=output ,speed=low , pupdr=00(no pull up or pull down ,type = push pull (00)
	    LCD_CRTL_GPIO->MODER &= ~(BV(LCD_RS*2)|BV(LCD_RW*2)|BV(LCD_EN*2));
 800036a:	4b1d      	ldr	r3, [pc, #116]	@ (80003e0 <LCDINIT+0xd0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1c      	ldr	r2, [pc, #112]	@ (80003e0 <LCDINIT+0xd0>)
 8000370:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000374:	6013      	str	r3, [r2, #0]
		LCD_CRTL_GPIO->MODER |= (BV(LCD_RS*2+1)|BV(LCD_RW*2+1)|BV(LCD_EN*2+1));
 8000376:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <LCDINIT+0xd0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a19      	ldr	r2, [pc, #100]	@ (80003e0 <LCDINIT+0xd0>)
 800037c:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000380:	6013      	str	r3, [r2, #0]
		LCD_CRTL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2)|BV(LCD_RS*2+1)|BV(LCD_RW*2)|BV(LCD_RW*2+1)|BV(LCD_EN*2)|BV(LCD_EN*2+1));
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <LCDINIT+0xd0>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	4a16      	ldr	r2, [pc, #88]	@ (80003e0 <LCDINIT+0xd0>)
 8000388:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800038c:	6093      	str	r3, [r2, #8]
		LCD_CRTL_GPIO->PUPDR &= ~(BV(LCD_RS*2)|BV(LCD_RS*2+1)|BV(LCD_RW*2)|BV(LCD_RW*2+1)|BV(LCD_EN*2)|BV(LCD_EN*2+1));
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <LCDINIT+0xd0>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a13      	ldr	r2, [pc, #76]	@ (80003e0 <LCDINIT+0xd0>)
 8000394:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000398:	60d3      	str	r3, [r2, #12]
		LCD_CRTL_GPIO->OTYPER &= ~(BV(LCD_RS)||BV(LCD_RW)||BV(LCD_EN));
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <LCDINIT+0xd0>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <LCDINIT+0xd0>)
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	6053      	str	r3, [r2, #4]

		LCD_CRTL_GPIO->BSRR =(BV(LCD_RS_clear)||BV(LCD_RW_clear)||BV(LCD_EN_clear));
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <LCDINIT+0xd0>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	619a      	str	r2, [r3, #24]


		DelayMs(200);
 80003ac:	20c8      	movs	r0, #200	@ 0xc8
 80003ae:	f7ff ff0b 	bl	80001c8 <DelayMs>
		LcdWrite(LCD_CMD,FUN_SET);
 80003b2:	2128      	movs	r1, #40	@ 0x28
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff87 	bl	80002c8 <LcdWrite>
		LcdWrite(LCD_CMD,DISP_ON_OFF);
 80003ba:	210f      	movs	r1, #15
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff ff83 	bl	80002c8 <LcdWrite>
		LcdWrite(LCD_CMD,ENTRY_MODE);
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff ff7f 	bl	80002c8 <LcdWrite>
		LcdWrite(LCD_CMD,CLEAR_DISPLAY);
 80003ca:	2101      	movs	r1, #1
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff7b 	bl	80002c8 <LcdWrite>
		DelayMs(200);
 80003d2:	20c8      	movs	r0, #200	@ 0xc8
 80003d4:	f7ff fef8 	bl	80001c8 <DelayMs>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40020c00 	.word	0x40020c00

080003e4 <LPuts>:

void LPuts(uint8_t line,char str[])
{	int i;
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	6039      	str	r1, [r7, #0]
 80003ee:	71fb      	strb	r3, [r7, #7]
	LcdWrite(LCD_CMD,line);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	4619      	mov	r1, r3
 80003f4:	2000      	movs	r0, #0
 80003f6:	f7ff ff67 	bl	80002c8 <LcdWrite>

	for(i=0;str[i]!='\0';i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e00a      	b.n	8000416 <LPuts+0x32>
	{
		LcdWrite(LCD_CMD,str[i]);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4619      	mov	r1, r3
 800040a:	2000      	movs	r0, #0
 800040c:	f7ff ff5c 	bl	80002c8 <LcdWrite>
	for(i=0;str[i]!='\0';i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	683a      	ldr	r2, [r7, #0]
 800041a:	4413      	add	r3, r2
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1ee      	bne.n	8000400 <LPuts+0x1c>
	}


}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	SystemInit();
 8000432:	f000 f821 	bl	8000478 <SystemInit>
	LCDINIT();
 8000436:	f7ff ff6b 	bl	8000310 <LCDINIT>


	LPuts(LINE_1,"DESD @SUNBEAM");
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <main+0x44>)
 800043c:	2080      	movs	r0, #128	@ 0x80
 800043e:	f7ff ffd1 	bl	80003e4 <LPuts>
	LPuts(LINE_2,"GOD BLESS ME");
 8000442:	490c      	ldr	r1, [pc, #48]	@ (8000474 <main+0x48>)
 8000444:	20c0      	movs	r0, #192	@ 0xc0
 8000446:	f7ff ffcd 	bl	80003e4 <LPuts>
	for(int i=0;i<16;i++)
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	e006      	b.n	800045e <main+0x32>
	{
		LcdWrite(LCD_CMD,LEFT_SHIFT);
 8000450:	2118      	movs	r1, #24
 8000452:	2000      	movs	r0, #0
 8000454:	f7ff ff38 	bl	80002c8 <LcdWrite>
	for(int i=0;i<16;i++)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3301      	adds	r3, #1
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	ddf5      	ble.n	8000450 <main+0x24>
	}
	return 0;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	08000598 	.word	0x08000598
 8000474:	080005a8 	.word	0x080005a8

08000478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  DWT_Init();
 800047c:	f000 f802 	bl	8000484 <DWT_Init>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <DWT_Init+0x58>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a13      	ldr	r2, [pc, #76]	@ (80004dc <DWT_Init+0x58>)
 800048e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000492:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <DWT_Init+0x58>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <DWT_Init+0x58>)
 800049a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800049e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <DWT_Init+0x5c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <DWT_Init+0x5c>)
 80004a6:	f023 0301 	bic.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <DWT_Init+0x5c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0b      	ldr	r2, [pc, #44]	@ (80004e0 <DWT_Init+0x5c>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004b8:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <DWT_Init+0x5c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004be:	bf00      	nop
    __ASM volatile ("NOP");
 80004c0:	bf00      	nop
    __ASM volatile ("NOP");
 80004c2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <DWT_Init+0x5c>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	e000edf0 	.word	0xe000edf0
 80004e0:	e0001000 	.word	0xe0001000

080004e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e4:	480d      	ldr	r0, [pc, #52]	@ (800051c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e8:	f7ff ffc6 	bl	8000478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480c      	ldr	r0, [pc, #48]	@ (8000520 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490d      	ldr	r1, [pc, #52]	@ (8000524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0a      	ldr	r4, [pc, #40]	@ (8000530 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000512:	f000 f811 	bl	8000538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff ff89 	bl	800042c <main>

0800051a <LoopForever>:

LoopForever:
  b LoopForever
 800051a:	e7fe      	b.n	800051a <LoopForever>
  ldr   r0, =_estack
 800051c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000524:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000528:	080005c0 	.word	0x080005c0
  ldr r2, =_sbss
 800052c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000530:	20000020 	.word	0x20000020

08000534 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000534:	e7fe      	b.n	8000534 <ADC_IRQHandler>
	...

08000538 <__libc_init_array>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	4d0d      	ldr	r5, [pc, #52]	@ (8000570 <__libc_init_array+0x38>)
 800053c:	4c0d      	ldr	r4, [pc, #52]	@ (8000574 <__libc_init_array+0x3c>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	2600      	movs	r6, #0
 8000544:	42a6      	cmp	r6, r4
 8000546:	d109      	bne.n	800055c <__libc_init_array+0x24>
 8000548:	4d0b      	ldr	r5, [pc, #44]	@ (8000578 <__libc_init_array+0x40>)
 800054a:	4c0c      	ldr	r4, [pc, #48]	@ (800057c <__libc_init_array+0x44>)
 800054c:	f000 f818 	bl	8000580 <_init>
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	2600      	movs	r6, #0
 8000556:	42a6      	cmp	r6, r4
 8000558:	d105      	bne.n	8000566 <__libc_init_array+0x2e>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000560:	4798      	blx	r3
 8000562:	3601      	adds	r6, #1
 8000564:	e7ee      	b.n	8000544 <__libc_init_array+0xc>
 8000566:	f855 3b04 	ldr.w	r3, [r5], #4
 800056a:	4798      	blx	r3
 800056c:	3601      	adds	r6, #1
 800056e:	e7f2      	b.n	8000556 <__libc_init_array+0x1e>
 8000570:	080005b8 	.word	0x080005b8
 8000574:	080005b8 	.word	0x080005b8
 8000578:	080005b8 	.word	0x080005b8
 800057c:	080005bc 	.word	0x080005bc

08000580 <_init>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr

0800058c <_fini>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr
